version: '3.8'

services:
  #MongoDB service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    networks:
      - my-website-network
    volumes:
      - mongodb_data:/data/db  # Use a volume for data persistence
    ports:
      - 27017:27017 # Expose port for external access if needed (optional in Docker network)
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=qwerty
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 10s
      timeout: 5s
      retries: 5
  
  backend:
    image: ninadrathod/my-website-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    networks:
      - my-website-network
    ports:
      - 3001:3001
    working_dir: /app
    depends_on:
      - mongodb
    environment:
      - PORT=3001
      - MONGODB_URI=mongodb://admin:qwerty@mongodb:27017 # Use service name as hostname
    healthcheck:
      test: wget -qO- http://localhost:3001/health | grep -q 'OK'
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
  upload-service:
    image: ninadrathod/my-website-upload-service
    build:
      context: ./upload-service
      dockerfile: Dockerfile
    container_name: upload-service
    networks:
      - my-website-network
    ports:
      - 3002:3002 # Host port 3002 maps to container's internal port 3002
    volumes:
      - ./upload-service/images:/app/images
    depends_on:
      - mongodb
    environment:
      - PORT=3002
      - MONGODB_URI=mongodb://admin:qwerty@mongodb:27017 # Use service name as hostname
    healthcheck:
      test: wget -qO- http://localhost:3002/health | grep -q 'OK'
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always  
  frontend:
    image: ninadrathod/my-website-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    networks:
      - my-website-network
    expose:
      - 3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    working_dir: /app
    depends_on:
      - backend
      - upload-service
    restart: always
  nginx: 
    image: nginx:latest
    container_name: my-website-nginx
    build:
      context: ./nginx # Tells Docker Compose to build from your new nginx directory
      dockerfile: Dockerfile # Use the Dockerfile in that directory
    networks:
      - my-website-network
    ports:
      - 80:80 # Map host's port 80 (default HTTP) to Nginx container's port 80
      - 443:443 # Map host's port 443 (default HTTPS)
    depends_on:
      - frontend # Nginx needs the frontend to be available to proxy requests
    restart: always
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot  
  
networks:
  my-website-network:
    driver: bridge

volumes:
  mongodb_data: