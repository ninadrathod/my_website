events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ADD OR MODIFY THIS LINE:
    client_max_body_size 15M; # Allows requests up to 15 megabytes

    # =======================================================
    # HTTP to HTTPS Redirect (Listens on port 80)
    # This block catches all HTTP traffic and redirects it to HTTPS.
    # =======================================================
    server {
        listen 80;
        listen [::]:80; # Listen on IPv6 as well
        server_name ninad.scrappify.co.in www.ninad.scrappify.co.in 52.66.29.4; # Use your domain(s) and/or IP
        return 301 https://$host$request_uri;
    }

    # =======================================================
    # HTTPS Server Block (Listens on port 443)
    # This block handles all secure HTTPS traffic.
    # =======================================================
    server {
        listen 443 ssl;
        listen [::]:443 ssl; # Listen on IPv6 for HTTPS
        server_name ninad.scrappify.co.in www.ninad.scrappify.co.in 52.66.29.4; # Use your domain(s) and/or IP

        # SSL Certificate and Key paths
        ssl_certificate /etc/ssl/certs/certificate.crt;
        ssl_certificate_key /etc/ssl/private/private.key;

        # SSL Protocols and Ciphers (Recommended for security)
        ssl_protocols TLSv1.2 TLSv1.3; # Use modern TLS versions
        ssl_prefer_server_ciphers on; # Server's cipher preference over client's
        # Strong cipher suites (adjust based on your security needs)
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256';

        # Optional: Security headers (add for better security posture)
        add_header X-Frame-Options "DENY";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "no-referrer-when-downgrade";

        # =======================================================
        # Proxy requests for Backend APIs
        # Frontend calls: https://yourdomain.com/backend-api/...
        # Backend expects: /backend-api/...
        # Nginx just passes it through.
        # =======================================================
        location /backend-api/ {
            proxy_pass http://backend:3001; # No rewrite needed, path matches
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # =======================================================
        # Proxy requests for Upload Service APIs
        # Frontend calls: https://yourdomain.com/upload-service-api/...
        # Upload service expects: /upload-service-api/...
        # Nginx just passes it through.
        # =======================================================
        location /upload-service-api/ {
            proxy_pass http://upload-service:3002; # No rewrite needed, path matches
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # =======================================================
        # Proxy requests for static images from upload-service
        # Frontend will request https://yourdomain.com/images/...
        # Nginx will proxy this to http://upload-service:3002/images/...
        # =======================================================
        location /images/ {
            proxy_pass http://upload-service:3002/images/; # Pass the /images/ path
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Proxy all other requests to the frontend service
        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}